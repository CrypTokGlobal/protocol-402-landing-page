Imagine you are the smartest AI and a world-class full-stack engineer (expert in UI/UX, front-end, backend, and modern web design). I need your help building a fully custom landing page (HTML/CSS/JS + backend) for a project. Please read all requirements carefully and then produce the complete code (front-end and back-end) for this page.
Project Overview:
We are creating a one-page landing site for SCETA’s "Protocol 402" whitepaper. The page should be professional, modern, and state-themed (South Carolina focus) to appeal to professionals (lawyers, policymakers, tech executives) while still feeling innovative and tech-forward. The primary goal is to get users to enter their Name and Email to download a PDF whitepaper, and log those submissions (temporarily in a Google Sheet or similar) for the team to use later (for follow-ups like event invites or updates). We want a sleek user experience that feels high-quality and trustworthy.
Key Features & Sections:
Hero Section (Top of Page):
Headline (H1): “Protocol 402: South Carolina’s Blueprint for Monetized Digital Infrastructure” – this should stand out prominently.
Subheadline (Tagline): “#AI=$BTC — Where Intelligence Meets Value” – a catchy phrase right below the headline (perhaps styled in a slightly smaller font or different weight).
Context Blurb: A one-liner to explain the whitepaper’s significance. For example: “Get the official 76-page whitepaper detailing how SC can become a digital powerhouse via blockchain, smart services, and AI-enhanced governance.” (Include this or similar text below the headline/subheadline to encourage interest.)
Attribution/Presenter Text: “Presented by SCETA, USC Law, and TECHINLAW” – this should be placed under the subheadline (perhaps in italics or a smaller font), to make it clear which organizations are behind this initiative. We want SCETA’s name highly visible here (maybe include SCETA’s full name “South Carolina Emerging Technology Association” somewhere, so visitors immediately know the organization).
Lead Capture Form: A central email capture form for the whitepaper download. This form should have two input fields side by side: one for Name (placeholder text: “Your Name”) and one for Email Address (placeholder: “Your Email”). The submit action is triggered by a prominent button.
Submit Button: Label it “Get the Whitepaper” (or “Download Whitepaper”). The button should stand out (consider using one of the theme accent colors for the button).
The form layout should be horizontal on desktop (Name and Email fields in one line with the button), but of course should stack vertically on mobile for responsiveness.
Form Submission Behavior: When the user submits their Name/Email, the following should happen:
The data (Name & Email) is sent to the backend (Node/Express) which will save the info to a Google Sheet (or a placeholder storage if direct Google Sheets integration is not straightforward in this environment – see Backend section for details).
The user should then be provided the whitepaper PDF. For now, since we’re just coding the page, we can simulate this by either triggering a file download or displaying a link to the PDF after successful submission. (If you have the PDF URL or file, you can integrate it; otherwise, just assume we have a whitepaper.pdf in the project or a link.)
Optionally, show a brief confirmation message on the page (like a small modal or an alert or a message below the form) saying something like “Thank you! Your download will begin shortly. Please check your email for a copy as well.” (This adds a nice feedback for the user).
Secondary Section – “What’s Inside Protocol 402?”
Below the hero, include a section that highlights key themes/topics covered in the Protocol 402 whitepaper. This should have a heading like “What’s Inside the Protocol?” or “What’s Inside Protocol 402?” centered at the top of this section.
Present the information in a 4-column layout (on large screens) with each column featuring one key topic. On mobile, these should stack vertically. Each topic should include:
An icon or emoji representing it (to add a visual element – it can be a small inline image or even an emoji if appropriate, e.g., 💡 for ideas, 🏦 or 💰 for finance, 🪙 for coin, ⚖️ or 🤖 etc., or small SVG icons if available). Keep icons style consistent and subtle.
A title (the name of the topic), and
A short description (one sentence) explaining that aspect.
The four key topics to include are:
Monetized APIs – Description: “Transform public data into digital revenue via pay-per-use interfaces.”
Blockchain Finance – Description: “Ensure trust with secure, auditable, permissioned ledgers.”
PalmettoCoin™ – Description: “SC’s state stablecoin designed to retain wealth in-state and modernize payments.” (Include the “™” symbol after PalmettoCoin as shown.)
Smart Contracts – Description: “Digitally transform budgeting and state finance with AI-driven logic.”
(If needed, you can adjust wording slightly for clarity, but keep the essence.)
Design/layout: These four items can be in cards or simple text blocks. Ensure equal spacing and a cohesive look. Possibly use icons with a uniform style (all outline icons, or all filled, or simple emojis) for consistency. The section background could remain plain, or a very subtle different tone (e.g., if the hero is dark, maybe this section is white or light, or vice versa) to distinguish it.
(Optional Extra Item): In one example design, there was mention of “Digital Sovereignty” as an additional concept (with description “Own the future with citizen-powered IDs, clouds, and services.”). Including this is optional – only add a fifth item if it fits nicely in your layout (for example, if using a grid of cards, maybe 2 rows of 3 items could work). But the core requirement is the four items above. We can omit “Digital Sovereignty” if it complicates the layout; the focus is on the four main points.
Call-to-Action Section / Footer:
Finally, have a section at the bottom that wraps up the page and provides a secondary call-to-action and footer info. This can be integrated as one combined section if that looks good. Contents:
A bold or inspiring statement, e.g., “Join us in shaping South Carolina’s digital frontier.” – This line should encourage the reader to get involved or learn more about the initiative beyond just downloading the whitepaper.
A button or link for an additional action: e.g., “Learn More at SCETA.io” – clicking this could take the user to the main SCETA website for more information. Style this button similarly to the whitepaper one (for consistency) but perhaps a different color or outline style to denote secondary action. If not a button, it can just be a prominent link styled as a button.
Logos of SCETA, USC Law, and TECHinLAW: Since SCETA (South Carolina Emerging Tech Association), USC Law (University of South Carolina School of Law), and TECHinLAW (tech law initiative) are collaborators, we want to display their logos for credibility. You can place these at the bottom, perhaps side by side or centered, in a smaller size. If you have the actual logo images, include them (for now maybe use placeholders or a simple text placeholder styled like a logo). At minimum, just having the text names in a distinguishable way is okay, but logos would be ideal. (Maybe include alt text like “SCETA logo”, etc., if using images.)
Footer Text: Below or alongside the logos, include a standard footer line: “© 2025 South Carolina Emerging Technology Association (SCETA). All rights reserved.” (This anchors the page with a professional footer note.)
Background: You can give this bottom section a distinct background color for contrast. In one reference, they used a bold blue for the download CTA footer – but our brand colors are garnet and gold. Perhaps use garnet (dark red/maroon) or black as the footer background, and then have the text in a contrasting color (gold or white). For example, a deep garnet background with white text could look sharp and on-brand. The “Learn More” button on such a background might be gold or white outlined. We want this section to stand out and feel like a conclusion.
Design & Theming Guidelines:
Color Scheme: Adhere to SC state colors / SCETA theme – primarily Garnet (#7C0A02 or similar deep reddish-maroon), Gold (a rich golden yellow), Black, and White. Since SCETA’s branding includes garnet and gold (similar to USC colors), use those for accents (like buttons, links, or important text). You can use either a dark theme (dark backgrounds with gold/garnet accents) or a light theme with garnet/gold accents on white – whichever looks more sleek and professional. The team liked a clean design (one example had a white background hero with black text). Perhaps we can do a hybrid: maybe a light hero section (white background with dark text and garnet/gold buttons) and a darker footer (garnet or black background with light text), to give a visually appealing contrast.
Typography: Use modern, professional fonts. We suggest using Inter (a clean sans-serif) for body and interface text, and maybe DM Serif Display or a similar elegant serif for the headlines to give a distinguished look. If those exact fonts aren’t available, choose something similar (sans-serif for most text and a high-quality serif or stylized font for headings). Ensure that the text is easily readable (no overly decorative fonts).
Layout & Spacing: The page should have a responsive design. Use a mobile-first approach or media queries so that on small screens:
The hero section stacks (probably the inputs stack vertically and the text is centered).
The four columns become one column each (or two-by-two grid on tablets).
The footer elements (logos and text) stack nicely.
Use CSS Flexbox or Grid for layout as needed. Maintain sufficient whitespace/padding so the design feels open and not crowded.
State-themed Visuals: If possible, incorporate subtle imagery related to South Carolina or technology:
For example, a faint outline of the state of South Carolina in the background of the hero section (perhaps as a semi-transparent large graphic behind the headline). Or a silhouette of the famous Palmetto tree or Lady Justice statue (since this involves law/justice and tech). Keep it subtle (e.g., a watermark-style graphic or a light SVG in the background) so it doesn’t distract from text, but adds flavor.
If no custom graphics, even a simple geometric tech background or gradient is fine, but ensure it doesn’t clash with text readability.
Animations & Interactivity: Add some light, polished animations to make the page feel dynamic and high-end:
For the buttons (e.g., “Get the Whitepaper”, “Learn More”), add a hover effect: maybe a slight glow or shadow, or change in background color intensity. Possibly a glowing outline or neon effect in the theme color on hover to give a modern touch.
Implement a scroll reveal or fade-in effect for elements: for example, when the user scrolls down, each of the “What’s Inside” columns could fade in or slide in subtly. There are simple CSS or small JS libraries for this, or you can use plain CSS animations triggered by scroll position (if doing from scratch, keep it minimal).
If feasible, you could animate an icon (for example, a Lady Justice icon’s outline glowing, or a small subtle animation on the SC state outline) – but this is a bonus. Only do this if it’s straightforward; the page should still load fast and not feel overdone.
Tone and Imagery: Overall, keep the tone professional and clean. We want to avoid anything that looks too “arcade” or “hackerish”. That means:
No overly neon cyberpunk color schemes, no flashing crypto coin animations, etc.
Instead, use modern corporate tech styling: lots of clean space, clear distinctions, and maybe data or network imagery if needed.
We’re targeting a mix of government, legal, and tech audiences, so the design should instill confidence (like something an innovative government initiative would use).
Technical Requirements (Front-end & Back-end):
Front-end:
Use HTML5 and modern CSS3 (with Flexbox/Grid) for structure and styling. You can include a <style> block in the HTML or a separate CSS file. If using any library (Bootstrap, Tailwind, etc.) mention it, but a custom hand-tailored CSS is actually preferred to meet the custom design.
Include any relevant meta tags for responsiveness (e.g., viewport meta tag for mobile).
The form should be in the HTML and have proper labels or ARIA attributes for accessibility (we want it to be accessible).
Ensure the design is tested for responsiveness (perhaps include a quick comment or description of how it looks on mobile vs desktop in comments).
If needed, you can use simple JavaScript (or better, minimal JS since the functionality is mostly form submission which can be handled by the browser via POST or by an AJAX call). For example, you might add a bit of JS to do a smooth scroll or to trigger animations on scroll. Keep it lightweight.
Back-end (Node.js with Express preferred):
Set up an Express server (since we’re in Replit, an index.js or server.js that listens on a port). The server will handle the form POST submission.
Create a POST route (e.g., /submit or /download) that receives the form data (Name and Email).
Google Sheet Integration: We want to save the submissions to a Google Sheet. Since this is Replit and we might not easily do OAuth flows here, suggest a simple method. Possible approaches:
Use the Google Sheets API with a service account JSON key (requires having credentials; if we had them, we could include and use google-spreadsheet npm package or Google APIs client). If you go this route, include instructions where to put the credentials and sheet ID.
Or, use a simpler approach: for example, use a tool like SheetDB or Sheety which can act as a REST API wrapper for a Google Sheet (this avoids direct OAuth and just uses a provided endpoint). This might be easier for a quick implementation. (If you know of a simpler Replit-friendly approach, feel free to use it.)
Alternatively, as a temporary fallback, simply have the backend write the data to a CSV file or Replit’s database, and log it to console, so we at least demonstrate that data is captured. We can then note that this should be replaced with Google Sheet integration when credentials are available.
After saving the data, the backend can respond by:
Sending back a success response (which the front-end can use to trigger a download). Possibly redirect the user to a URL of the PDF or initiate a download.
For simplicity, you can have the form submission do a normal HTML form POST that triggers a file download response (like setting Content-disposition: attachment header with the PDF) and maybe also logs to console. Or use AJAX (Fetch) to post, then on success show a link. Choose an approach that is reliable and easy to follow.
Note: We will eventually swap out this temporary data-store with SCETA’s official email plugin or CRM. So, write the code in a way that isolating the “save contact” logic is easy (like in one function or route) so it can later be replaced by an API call to their email system. For now, Google Sheets (or equivalent) is fine.
Ensure the Express app is properly configured to serve the static files (the HTML/CSS, and possibly the PDF if we place it in the project). In Replit, this often means using app.use(express.static('public')) or similar if needed.
Have the server listen on the correct port (Replit typically uses process.env.PORT).
Deliverables/Output: Provide the complete code for:
The HTML page (with embedded CSS or a separate CSS section, and any JS if used). This should reflect the design and structure described.
The Express backend (JavaScript code) that handles the form submission and data storage and serves the page (if using a template, or if just serving the static HTML, ensure that works).
If using separate files (HTML, CSS, JS, server), you can present them distinctly (clearly indicating which file is which in comments). If it’s easier, you could also use an Express app with an embedded HTML in a template string, but clarity is key.
Include comments in the code to explain key sections and any placeholders (like “// TODO: Replace with actual Google Sheets integration”). This helps make sure there’s no confusion when I implement or modify it.
Additional Notes and Expectations:
The end result should be a single-page application (not needing navigation to other pages) that looks visually impressive (“sexy” design) yet maintains corporate professionalism. We want to “wow” the user with the look, but also make it immediately clear that this is a SCETA (South Carolina Emerging Tech Association) initiative (so adding SCETA branding elements is crucial).
Please double-check that all text from the content is included (don’t omit any of the headlines, subheads, descriptions provided above). Also, ensure any trademark symbols or specific formatting (like the “#AI=$BTC” with the # and = sign) are exact.
The design does not need to be an exact clone of any existing site, but it should incorporate the best aspects of the examples provided:
e.g., clear hero message and form (like the example we have),
clean section highlighting the four points,
and a strong call-to-action footer.
We have a reference that the team liked, and we’re basically implementing those ideas with our own twist (colors and branding).
Test the form logic if possible (even if just printing to console or to a dummy sheet) to make sure it works.
Keep the code organized and clean for future updates.
Now, given all these details, please generate the complete code (HTML, CSS, and Node/Express backend) for the landing page. Make sure to integrate everything seamlessly (front-end form connects to back-end, etc.). Include any necessary instructions in comments.
Goal: Deliver a ready-to-run Replit project code that, when started, serves the landing page and allows me to enter a name/email, save it (to sheet or placeholder), and (simulated) download the whitepaper. The page should look polished and match the description (dark theme garnet/gold or similar, responsive, with the specified text content). Thank you! Let’s build this step by step, ensuring the final output meets all the requirements.